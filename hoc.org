* Scientific Papers as Code

** Prose as Programmable Data

We could start with using Pollen which is a wonderful means to generate code in the pollen markdown language and thus compile the same content into multiple formats like PDF and HTML.


** Reference:

1.	Pollen  - https://github.com/mbutterick/pollen

2.	Pollen Documentation - http://docs.racket-lang.org/pollen/

* Why House of Cards?

** Abstract

“What we truly understand, we never forget” 

It is our strong belief that contextual learning is the best form of learning which leads to deeper understanding and insights on the subject matter.


** There is just too much to learn!

*** Programming Languages

*** Mathematics and Computer Science

*** Web Frameworks 

*** Databases

*** System Design

*** Websites 


** Roadmap

*** We build on these stories using a Deck of Cards.

*** Algorithms could be based on simple stories about personified cards. 

*** Modeling card games using the modern software development techniques.
* The Card Universe
** Each card is given it's own unique identity and personality
** The persona has been derived from two sources, namely Alagesia and schema.org
https://schema.org/docs/full.html
** We use these fields to play out the various scenarios in the Card Universe.
* Data Structures of choice
  https://www.geeksforgeeks.org/data-structures/
** Clojure  
https://github.com/anmonteiro/lumo/releases/tag/1.9.0
*** list
*** hash-map
** Data Modeling using Clojure lists and hash-maps
**** 
     #+BEGIN_SRC  clojure

(def suites '("Spades" "Clubs" "Hearts" "Diamonds"))
(def ranks '(1 2 3 4 5 6 7 8 9 10 11 12 13))


(def a-sample-list '(( "Rank" "House")))
(conj a-sample-list '( "1" "Spades"))



     #+END_SRC
** References 

* Algorithms
https://www.geeksforgeeks.org/fundamentals-of-algorithms/

** Types of Algorithms 
*** Searching 
**** Linear Search 
**** Binary Search 
**** Jump Search
**** Interpolation Search
**** Exponential Search
**** Ternary Search
*** Sorting
**** Selection Sort
**** Bubble Sort
**** Insertion Sort
**** Merge Sort
**** Heap Sort
**** Quick Sort
**** Radix Sort
**** Counting Sort
**** Bucket Sort
**** Shell Sort
**** Comb Sort
**** Pigeonhole Sort
**** Cycle Sort
** Resources
*** http://www.4clojure.com/problems

* Playing Card Games
https://gitlab.com/abhi18av/game-ebooks
** Solitaire
* Later 
https://github.com/kamranahmedse/developer-roadmap

** Sample Projects
** Web Backend Programming
*** API
*** DevOps
**** XEN Unikernels
**** Hosting
***** DigitalOcean
***** AWS
***** Scaleway
***** e2e networks
**** GitLab
**** Slack Notifications
**** Virtual Images
**** Docker Images
*** Databases
**** EDN 
**** XML
**** JSON
**** GRPC
**** PostgreSQL
**** S3
**** Backblaze
**** Datomic 
**** OrientDB
**** MongoDB
**** OracleDB  ( XML and others ) 
**** Neo4J
**** Redis
*** Testing 
**** Load Testing 
***** jMeter 
***** Gattling
**** UI Testing
*** Logging
*** Documentation
** Web Frontend Programming
*** re-frame 

*** HTML

*** CSS

** Full Stack Programming

*** fulcro 

** Mobile Application

*** re-natal

** Desktop Application

*** JavaFX

*** Electron

** Terminal Appilcations

** Distributed Systems and Processing
** Data Science 

** Machine Learning and Artificial Intelligence

** Architecture Design 
https://github.com/AlaaAttya/software-architect-roadmap
** Process Design

** User Experience Design ( UX ) 

** User Interface Design ( UI ) 

** Search Engine

** Web Crawler

